name: Test and build mendeleev package

on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:
    branches: [master]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: poetry install --with vis --no-interaction
      - name: Lint with flake8
        run: |
          source $VENV
          # stop the build if there are Python syntax errors or undefined names
          flake8 mendeleev --count --select=E9,F63,F7,F82 --max-line-length=127 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          black --check mendeleev
      - name: Test with pytest
        run: |
          source $VENV 
          pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Build and publish the package to PYPI
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install pypa/build
        run: python -m pip install build --user

      - name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel --outdir dist/ .

      - name: Publish distribution to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
